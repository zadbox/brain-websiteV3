version: '3.8'

services:
  # Laravel Application
  laravel:
    build:
      context: .
      dockerfile: Dockerfile.laravel
    container_name: braingen_laravel
    ports:
      - "8000:80"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=braingen_tech
      - DB_USERNAME=braingen_user
      - DB_PASSWORD=braingen_password
      - REDIS_HOST=redis
      - LANGCHAIN_SERVICE_URL=http://langchain:8001
      - LANGCHAIN_TIMEOUT=30
    depends_on:
      - mysql
      - redis
      - langchain
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    networks:
      - braingen_network

  # Python LangChain Service
  langchain:
    build:
      context: ./python-service
      dockerfile: Dockerfile
    container_name: braingen_langchain
    ports:
      - "8001:8001"
    environment:
      - LLM_PROVIDER=free
      - COHERE_API_KEY=${COHERE_API_KEY}
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_COLLECTION=braingen_tech
      - OLLAMA_BASE_URL=http://ollama:11434
      - LOG_LEVEL=INFO
    depends_on:
      - qdrant
      - ollama
    volumes:
      - ./python-service/logs:/app/logs
    networks:
      - braingen_network
    restart: unless-stopped

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: braingen_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - braingen_network
    restart: unless-stopped

  # Ollama Local LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: braingen_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_MAX_LOADED_MODELS=2
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_FLASH_ATTENTION=true
    networks:
      - braingen_network
    restart: unless-stopped
    # For GPU support, uncomment the deploy section below
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]

  # Ollama Model Initialization
  ollama-init:
    image: ollama/ollama:latest
    container_name: braingen_ollama_init
    depends_on:
      - ollama
    volumes:
      - ollama_data:/root/.ollama
      - ./scripts/init-ollama.sh:/init-ollama.sh
    environment:
      - OLLAMA_HOST=http://ollama:11434
    networks:
      - braingen_network
    command: >
      sh -c "
        echo 'üöÄ Initializing Ollama models...'
        
        # Wait for Ollama service
        while ! curl -s http://ollama:11434/api/tags >/dev/null 2>&1; do
          echo '‚è≥ Waiting for Ollama service...'
          sleep 5
        done
        
        echo '‚úÖ Ollama service ready!'
        
        # Pull models
        echo 'üì• Downloading llama3.2:1b model...'
        ollama pull llama3.2:1b
        
        echo 'üéâ Model download complete!'
        ollama list
      "
    restart: "no"

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: braingen_mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_DATABASE=braingen_tech
      - MYSQL_USER=braingen_user
      - MYSQL_PASSWORD=braingen_password
      - MYSQL_ROOT_PASSWORD=root_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - braingen_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "braingen_user", "-pbraingen_password"]
      timeout: 20s
      retries: 10
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: braingen_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - braingen_network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: braingen_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - laravel
      - langchain
    networks:
      - braingen_network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: braingen_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - braingen_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: braingen_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - braingen_network
    restart: unless-stopped

  # MySQL Exporter for Prometheus
  mysql-exporter:
    image: prom/mysqld-exporter:latest
    container_name: braingen_mysql_exporter
    ports:
      - "9104:9104"
    environment:
      - DATA_SOURCE_NAME=braingen_user:braingen_password@tcp(mysql:3306)/braingen_tech
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - braingen_network
    restart: unless-stopped

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: braingen_redis_exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    networks:
      - braingen_network
    restart: unless-stopped

  # Nginx Prometheus Exporter
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: braingen_nginx_exporter
    ports:
      - "9113:9113"
    command:
      - -nginx.scrape-uri=http://nginx:80/nginx_status
    depends_on:
      - nginx
    networks:
      - braingen_network
    restart: unless-stopped

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: braingen_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - braingen_network
    restart: unless-stopped

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: braingen_cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - braingen_network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:
  qdrant_data:
  ollama_data:
  prometheus_data:
  grafana_data:

networks:
  braingen_network:
    driver: bridge 